############################################################
# File:   all.snippets
# Author: marsh
#
# all snippets
############################################################

#############################
#  global scripts(python3)  #
#############################
global !p
import string, vim, re

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags, text = next(i).split(':', 1)

            if len(flags) == 0:
                rv.append(('OTHER', text, text, text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif 's' in flags and 'O' not in flags:
                ctriple = ["TRIPLE"]
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags, text = next(i).split(':', 1)
                assert flags[0] == 'm'
                ctriple.append(text)

                flags, text = next(i).split(':', 1)
                assert flags[0] == 'e'
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)
            elif 'b' in flags:
                if len(text) == 1:
                    rv.insert(0, ("SINGLE_CHAR", text, text, text, ""))
    except StopIteration:
        return rv

def get_comment_format():
    """ Returns a 5-element tuple (first_line, middle_lines, end_line, indent, hasEndFormat)
    representing the comment format for the current file.
    It first looks at the 'commentstring', if that ends with %s, it uses that.
    Otherwise it parses '&comments' and prefers single character comment
    markers if there are any.
    """
    commentstring = vim.eval("&commentstring")
    if commentstring.endswith("%s"):
        c = commentstring[:-2]
        return (c.rstrip(), c.rstrip(), c.rstrip(), "", False)
    comments = _parse_comments(vim.eval("&comments"))
    for c in comments:
        if c[0] == "SINGLE_CHAR":
            return (c[1:], True)
    return comments[0][1:]

def make_box(twidth, bwidth=None):
    b, m, e, i = (s.strip() for s in get_comment_format())
    m0 = m[0] if m else ''
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m0 + 2 * m0
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m0 + 2 * m0 + e
    return sline, mlines, mlinee, eline


def make_box_using_specified_char(c, twidth, bwidth=None):
    b, m, e, i = (s.strip() for s in get_comment_format())
    m0 = m[0] if m else ''
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m0 + 2 * m0
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m0 + 2 * m0 + e
    return sline, mlines, mlinee, eline


def foldmarker():
    "Return a tuple of (open fold marker, close fold marker)"
    return vim.eval("&foldmarker").split(",")


def display_width(str):
    """Return the required over-/underline length for str."""
    try:
        # Respect &ambiwidth and &tabstop, but old vim may not support this
        return vim.strdisplaywidth(str)
    except AttributeError:
        # Fallback
        from unicodedata import east_asian_width
        result = 0
        for c in str:
            result += 2 if east_asian_width(c) in ('W', 'F') else 1
        return result
endglobal


##############
#  snippets  #
##############
snippet todo "Insert todo task"
`!p snip.rv = get_comment_format()[0]` TODO: ${1:task}`!p comments = get_comment_format()
if comments[4]:
	snip.rv = " " + comments[2]`
endsnippet	

snippet note "Insert note task"
`!p snip.rv = get_comment_format()[0]` NOTE: ${1:task}`!p comments = get_comment_format()
if comments[4]:
	snip.rv = " " + comments[2]`
endsnippet	


snippet file_header "Insert file header"
`!p snip.rv = get_comment_format()[0] * int( 60.0 / len(get_comment_format()[0]) )`
`!p snip.rv = get_comment_format()[0]` File:   `!p snip.rv = snip.fn`
`!p snip.rv = get_comment_format()[0]` Author: `whoami`
`!p snip.rv = get_comment_format()[0]`
`!p snip.rv = get_comment_format()[0]` ${1:descriptions}
`!p snip.rv = get_comment_format()[0] * int( 60.0 / len(get_comment_format()[0]) )`
endsnippet


#################
#  date / time  #
#################
snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%Y-%m-%d %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet


##########
#  misc  #
##########
snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = str(uuid.uuid4())`
endsnippet


# vim: noexpandtab
