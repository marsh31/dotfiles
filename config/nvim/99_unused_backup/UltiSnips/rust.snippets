snippet macro_use "#[macro_use]"
#[macro_use]$0
endsnippet

snippet allow_dead_code "#[allow(dead_code)]"
#[allow(dead_code)]$0
endsnippet

snippet derive "#[derive(...)]"
#[derive($1)]$0
endsnippet

snippet derive_struct "#[derive(...) struct]"
#[derive(${1:Debug})]
struct ${2:Name} {
$0
}
endsnippet


snippet typedef "type defA = typeA;"
type ${1:def} = ${2:types};${0}
endsnippet

snippet vecdef "define vec type value"
let ${1:item}: Vec<${2:_}> = ${0}
endsnippet


snippet arrow "arrow like -> "
-> ${0}
endsnippet


snippet resulttype "Result type such as Result<T, Err>"
Result<${1:T}, ${2:Err}> $0
endsnippet



snippet comment_file "doc comment for file or module"
//! ${0}
endsnippet

snippet comment_func "doc comment for function"
/// ${0}
endsnippet
